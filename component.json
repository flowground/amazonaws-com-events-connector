{
    "title": "Amazon CloudWatch Events",
    "description": "Amazon CloudWatch Events helps you to respond to state changes in your AWS\nresources. When your resources change state, they automatically send events into\nan event stream. You can create rules that match selected events in the stream\nand route them to targets to take action. You can also use rules to take action\non a predetermined schedule. For example, you can configure rules to:\n\n *  Automatically invoke an AWS Lambda function to update DNS entries when an\n   event notifies you that Amazon EC2 instance enters the running state.\n   \n   \n *  Direct specific API records from AWS CloudTrail to an Amazon Kinesis data\n   stream for detailed analysis of potential security or availability risks.\n   \n   \n *  Periodically invoke a built-in target to create a snapshot of an Amazon EBS\n   volume.\n   \n   \n\nFor more information about the features of Amazon CloudWatch Events, see the \nAmazon CloudWatch Events User Guide\n[http://docs.aws.amazon.com/AmazonCloudWatch/latest/events].",
    "docsUrl": "https://aws.amazon.com/events/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/events/2015-10-07/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://events.amazonaws.com/",
                    "http://events.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "DeleteRule": {
            "main": "./lib/actions/DeleteRule.js",
            "title": "DeleteRule",
            "description": "Deletes the specified rule.\n\nBefore you can delete the rule, you must remove all targets, using RemoveTargets\n.\n\nWhen you delete a rule, incoming events might continue to match to the deleted\nrule. Allow a short period of time for changes to take effect.\n\nManaged rules are rules created and managed by another AWS service on your\nbehalf. These rules are created by those other AWS services to support\nfunctionality in those services. You can delete these rules using the Force \noption, but you should do so only if you are sure the other service is not still\nusing that rule.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRule.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeEventBus": {
            "main": "./lib/actions/DescribeEventBus.js",
            "title": "DescribeEventBus",
            "description": "Displays the external AWS accounts that are permitted to write events to your account using your account's event bus, and the associated policy. To enable your account to receive events from other accounts, use <a>PutPermission</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeEventBus.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeRule": {
            "main": "./lib/actions/DescribeRule.js",
            "title": "DescribeRule",
            "description": "Describes the specified rule.\n\nDescribeRule does not list the targets of a rule. To see the targets associated\nwith a rule, use ListTargetsByRule.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeRule.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisableRule": {
            "main": "./lib/actions/DisableRule.js",
            "title": "DisableRule",
            "description": "Disables the specified rule. A disabled rule won't match any events, and won't\nself-trigger if it has a schedule expression.\n\nWhen you disable a rule, incoming events might continue to match to the disabled\nrule. Allow a short period of time for changes to take effect.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisableRule.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "EnableRule": {
            "main": "./lib/actions/EnableRule.js",
            "title": "EnableRule",
            "description": "Enables the specified rule. If the rule does not exist, the operation fails.\n\nWhen you enable a rule, incoming events might not immediately start matching to\na newly enabled rule. Allow a short period of time for changes to take effect.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/EnableRule.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRuleNamesByTarget": {
            "main": "./lib/actions/ListRuleNamesByTarget.js",
            "title": "ListRuleNamesByTarget",
            "description": "Lists the rules for the specified target. You can see which of the rules in Amazon CloudWatch Events can invoke a specific target in your account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRuleNamesByTarget.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRules": {
            "main": "./lib/actions/ListRules.js",
            "title": "ListRules",
            "description": "Lists your Amazon CloudWatch Events rules. You can either list all the rules or\nyou can provide a prefix to match to the rule names.\n\nListRules does not list the targets of a rule. To see the targets associated\nwith a rule, use ListTargetsByRule.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRules.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTargetsByRule": {
            "main": "./lib/actions/ListTargetsByRule.js",
            "title": "ListTargetsByRule",
            "description": "Lists the targets assigned to the specified rule.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTargetsByRule.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutEvents": {
            "main": "./lib/actions/PutEvents.js",
            "title": "PutEvents",
            "description": "Sends custom events to Amazon CloudWatch Events so that they can be matched to rules.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutEvents.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutPermission": {
            "main": "./lib/actions/PutPermission.js",
            "title": "PutPermission",
            "description": "Running PutPermission permits the specified AWS account or AWS organization to\nput events to your account's default event bus. CloudWatch Events rules in your\naccount are triggered by these events arriving to your default event bus. \n\nFor another account to send events to your account, that external account must\nhave a CloudWatch Events rule with your account's default event bus as a target.\n\nTo enable multiple AWS accounts to put events to your default event bus, run \nPutPermission once for each of these accounts. Or, if all the accounts are\nmembers of the same AWS organization, you can run PutPermission once specifying \nPrincipal as \"*\" and specifying the AWS organization ID in Condition, to grant\npermissions to all accounts in that organization.\n\nIf you grant permissions using an organization, then accounts in that\norganization must specify a RoleArn with proper permissions when they use \nPutTarget to add your account's event bus as a target. For more information, see \nSending and Receiving Events Between AWS Accounts\n[http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/CloudWatchEvents-CrossAccountEventDelivery.html] \nin the Amazon CloudWatch Events User Guide.\n\nThe permission policy on the default event bus cannot exceed 10 KB in size.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutPermission.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutRule": {
            "main": "./lib/actions/PutRule.js",
            "title": "PutRule",
            "description": "Creates or updates the specified rule. Rules are enabled by default, or based on\nvalue of the state. You can disable a rule using DisableRule.\n\nIf you are updating an existing rule, the rule is replaced with what you specify\nin this PutRule command. If you omit arguments in PutRule, the old values for\nthose arguments are not kept. Instead, they are replaced with null values.\n\nWhen you create or update a rule, incoming events might not immediately start\nmatching to new or updated rules. Allow a short period of time for changes to\ntake effect.\n\nA rule must contain at least an EventPattern or ScheduleExpression. Rules with\nEventPatterns are triggered when a matching event is observed. Rules with\nScheduleExpressions self-trigger based on the given schedule. A rule can have\nboth an EventPattern and a ScheduleExpression, in which case the rule triggers\non matching events as well as on a schedule.\n\nMost services in AWS treat : or / as the same character in Amazon Resource Names\n(ARNs). However, CloudWatch Events uses an exact match in event patterns and\nrules. Be sure to use the correct ARN characters when creating event patterns so\nthat they match the ARN syntax in the event you want to match.\n\nIn CloudWatch Events, it is possible to create rules that lead to infinite\nloops, where a rule is fired repeatedly. For example, a rule might detect that\nACLs have changed on an S3 bucket, and trigger software to change them to the\ndesired state. If the rule is not written carefully, the subsequent change to\nthe ACLs fires the rule again, creating an infinite loop.\n\nTo prevent this, write the rules so that the triggered actions do not re-fire\nthe same rule. For example, your rule could fire only if ACLs are found to be in\na bad state, instead of after any change. \n\nAn infinite loop can quickly cause higher than expected charges. We recommend\nthat you use budgeting, which alerts you when charges exceed your specified\nlimit. For more information, see Managing Your Costs with Budgets\n[http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html]\n.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutRule.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutTargets": {
            "main": "./lib/actions/PutTargets.js",
            "title": "PutTargets",
            "description": "Adds the specified targets to the specified rule, or updates the targets if they\nare already associated with the rule.\n\nTargets are the resources that are invoked when a rule is triggered.\n\nYou can configure the following as targets for CloudWatch Events:\n\n *  EC2 instances\n   \n   \n *  SSM Run Command\n   \n   \n *  SSM Automation\n   \n   \n *  AWS Lambda functions\n   \n   \n *  Data streams in Amazon Kinesis Data Streams\n   \n   \n *  Data delivery streams in Amazon Kinesis Data Firehose\n   \n   \n *  Amazon ECS tasks\n   \n   \n *  AWS Step Functions state machines\n   \n   \n *  AWS Batch jobs\n   \n   \n *  AWS CodeBuild projects\n   \n   \n *  Pipelines in AWS CodePipeline\n   \n   \n *  Amazon Inspector assessment templates\n   \n   \n *  Amazon SNS topics\n   \n   \n *  Amazon SQS queues, including FIFO queues\n   \n   \n *  The default event bus of another AWS account\n   \n   \n\nCreating rules with built-in targets is supported only in the AWS Management\nConsole. The built-in targets are EC2 CreateSnapshot API call, EC2\nRebootInstances API call, EC2 StopInstances API call, and EC2 TerminateInstances\nAPI call. \n\nFor some target types, PutTargets provides target-specific parameters. If the\ntarget is a Kinesis data stream, you can optionally specify which shard the\nevent goes to by using the KinesisParameters argument. To invoke a command on\nmultiple EC2 instances with one rule, you can use the RunCommandParameters \nfield.\n\nTo be able to make API calls against the resources that you own, Amazon\nCloudWatch Events needs the appropriate permissions. For AWS Lambda and Amazon\nSNS resources, CloudWatch Events relies on resource-based policies. For EC2\ninstances, Kinesis data streams, and AWS Step Functions state machines,\nCloudWatch Events relies on IAM roles that you specify in the RoleARN argument\nin PutTargets. For more information, see Authentication and Access Control\n[http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/auth-and-access-control-cwe.html] \nin the Amazon CloudWatch Events User Guide.\n\nIf another AWS account is in the same region and has granted you permission\n(using PutPermission), you can send events to that account. Set that account's\nevent bus as a target of the rules in your account. To send the matched events\nto the other account, specify that account's event bus as the Arn value when you\nrun PutTargets. If your account sends events to another account, your account is\ncharged for each sent event. Each event sent to another account is charged as a\ncustom event. The account receiving the event is not charged. For more\ninformation, see Amazon CloudWatch Pricing\n[https://aws.amazon.com/cloudwatch/pricing/].\n\nIf you are setting the event bus of another account as the target, and that\naccount granted permission to your account through an organization instead of\ndirectly by the account ID, then you must specify a RoleArn with proper\npermissions in the Target structure. For more information, see Sending and\nReceiving Events Between AWS Accounts\n[http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/CloudWatchEvents-CrossAccountEventDelivery.html] \nin the Amazon CloudWatch Events User Guide.\n\nFor more information about enabling cross-account events, see PutPermission.\n\n Input, InputPath, and InputTransformer are mutually exclusive and optional\nparameters of a target. When a rule is triggered due to a matched event:\n\n *  If none of the following arguments are specified for a target, then the\n   entire event is passed to the target in JSON format (unless the target is\n   Amazon EC2 Run Command or Amazon ECS task, in which case nothing from the\n   event is passed to the target).\n   \n   \n *  If Input is specified in the form of valid JSON, then the matched event is\n   overridden with this constant.\n   \n   \n *  If InputPath is specified in the form of JSONPath (for example, $.detail),\n   then only the part of the event specified in the path is passed to the target\n   (for example, only the detail part of the event is passed).\n   \n   \n *  If InputTransformer is specified, then one or more specified JSONPaths are\n   extracted from the event and used as values in a template that you specify as\n   the input to the target.\n   \n   \n\nWhen you specify InputPath or InputTransformer, you must use JSON dot notation,\nnot bracket notation.\n\nWhen you add targets to a rule and the associated rule triggers soon after, new\nor updated targets might not be immediately invoked. Allow a short period of\ntime for changes to take effect.\n\nThis action can partially fail if too many requests are made at the same time.\nIf that happens, FailedEntryCount is non-zero in the response and each entry in \nFailedEntries provides the ID of the failed target and the error code.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutTargets.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RemovePermission": {
            "main": "./lib/actions/RemovePermission.js",
            "title": "RemovePermission",
            "description": "Revokes the permission of another AWS account to be able to put events to your default event bus. Specify the account to revoke by the <code>StatementId</code> value that you associated with the account when you granted it permission with <code>PutPermission</code>. You can find the <code>StatementId</code> by using <a>DescribeEventBus</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RemovePermission.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RemoveTargets": {
            "main": "./lib/actions/RemoveTargets.js",
            "title": "RemoveTargets",
            "description": "Removes the specified targets from the specified rule. When the rule is\ntriggered, those targets are no longer be invoked.\n\nWhen you remove a target, when the associated rule triggers, removed targets\nmight continue to be invoked. Allow a short period of time for changes to take\neffect.\n\nThis action can partially fail if too many requests are made at the same time.\nIf that happens, FailedEntryCount is non-zero in the response and each entry in \nFailedEntries provides the ID of the failed target and the error code.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RemoveTargets.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TestEventPattern": {
            "main": "./lib/actions/TestEventPattern.js",
            "title": "TestEventPattern",
            "description": "Tests whether the specified event pattern matches the provided event.\n\nMost services in AWS treat : or / as the same character in Amazon Resource Names\n(ARNs). However, CloudWatch Events uses an exact match in event patterns and\nrules. Be sure to use the correct ARN characters when creating event patterns so\nthat they match the ARN syntax in the event you want to match.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TestEventPattern.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}